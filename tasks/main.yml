---
- block:
  - name: setup dehydrated domain name list
    ansible.builtin.lineinfile:
      path: "/etc/dehydrated/domains.txt"
      line: "{{ item }}"
      create: "yes"
    loop: "{{ letsencrypt_auth_domain_names }}"

  - name: check if cert file exists
    ansible.builtin.stat:
      path: "/var/lib/dehydrated/certs/{{ item }}/fullchain.pem"
    loop: "{{ letsencrypt_auth_domain_names }}"
    register: "certs_file"

  - name: install nginx config
    ansible.builtin.template:
      src: "nginx_before_auth.j2"
      dest: "/etc/nginx/sites-available/{{ item.0 }}"
      owner: "root"
      group: "root"
      mode: "0644"
    when: "not item.1.stat.exists"
    loop: "{{ letsencrypt_auth_domain_names|zip(certs_file.results)|list }}"

  - name: create soft link
    ansible.builtin.file:
      src: "/etc/nginx/sites-available/{{ item.0 }}"
      dest: "/etc/nginx/sites-enabled/{{ item.0 }}"
      owner: "root"
      group: "root"
      state: "link"
    when: "not item.1.stat.exists"
    loop: "{{ letsencrypt_auth_domain_names|zip(certs_file.results)|list }}"

  - name: reload nginx
    ansible.builtin.systemd: state=reloaded name=nginx

  - name: getting certs
    ansible.builtin.command: "dehydrated -c"

  - name: check if nginx conf already has ssl settings
    ansible.builtin.find:
      path: "/etc/nginx/sites-available/"
      pattern: "{{ item }}"
      contains: '^\s*ssl\s*on\s*;'
    register: "nginx_config_ssl_enabled"
    loop: "{{ letsencrypt_auth_domain_names }}"

  - name: activate certs
    ansible.builtin.template:
      src: "nginx_after_auth.j2"
      dest: "/etc/nginx/sites-available/{{ item.0 }}"
      owner: "root"
      group: "root"
      mode: "0644"
    when: not item.1.matched
    loop: "{{ letsencrypt_auth_domain_names|zip(nginx_config_ssl_enabled.results)|list }}"

  - name: "reload nginx"
    ansible.builtin.systemd: "state=reloaded name=nginx"
  tags:
    - letsencrypt_auth
